<?php

// On appelle le fichier theme.inc contenant les fonction de thème
// et de preprocess.
require_once('formation.theme.inc');

/**
 * Implements hook_menu().
 */
function formation_menu() {
  // Page principale "formation".
  $items['formation'] = array(
    'title'           => 'Training',
    'page callback'   => 'formation_page',
    'access callback' => TRUE,
    'file'            => 'formation.page.inc',
  );
	// Onglet "accueil" par défaut.
  // Cet onglet hérite du contenu de la page principale.
  $items['formation/accueil'] = array(
    'title'  => 'Welcome',
    'type'   => MENU_DEFAULT_LOCAL_TASK,      // type "onglet" par défaut.
    'weight' => '0',
    'file'   => 'formation.page.inc',
  );
  // Onglet "liste-noeuds" listant les noeuds d'un certain type.
  // N.B. : Tout ce qui "déborde" à droite du chemin de cette page
  // sera passé en argument à la fonction de callback formation_liste_noeuds_page().
  $items['formation/liste-noeuds'] = array(
    'title'           => 'Node list',
    'page callback'   => 'formation_liste_noeuds_page',
    'access callback' => TRUE,
    'type'            => MENU_LOCAL_TASK,            // type "onglet".
    'weight'          => '1',
    'file'            => 'formation.page.inc',
  );
	$items['formation.rss'] = array(
		'title'           => 'Flux formation',
		'page callback'   => 'formation_flux_page',
		'access callback' => TRUE,
		'type'            => MENU_CALLBACK,              // Aucun lien de menu.
		'file'            => 'formation.page.inc',
	);
	// Onglet calculatrice.
  $items['formation/calculatrice'] = array(
    'title'            => 'Calculator',
    'description'      => 'Formation module calculatrice',
    'page callback'    => 'drupal_get_form',
		'page arguments'   => array('formation_calculatrice'),
    'access callback'  => 'user_access',
    'access arguments' => array('access formation'),
    'type'             => MENU_LOCAL_TASK,
    'weight'           => '2',
    'file'             => 'formation.form.inc',
  );
	// Page où s'affiche le résultat de la calculatrice.
  $items['resultat'] = array(
    'title'            => 'Result',
    'page callback'    => 'formation_resultat_page',
    'access callback'  => 'user_access',
    'access arguments' => array('access formation'),
    'type'             => MENU_CALLBACK,
    'file'             => 'formation.page.inc',
  );
  // Page pour administrer la couleur des blocs.
  $items['admin/appearance/block-color'] = array(
    'title'            => 'Blocks color',
    'type'             => MENU_LOCAL_TASK,
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('formation_block_color_admin_form'),
    'access callback'  => 'user_access',
    'access arguments' => array('access formation'),
		'file'             => 'formation.form.inc',
  );
  // Page 'Statistiques' sous forme d'onglet.
  // Puisque le chemin de cette page commence comme le chemin d'un noeud,
  // cet onglet apparaîtra automatiquement sur les pages de noeud.
  $items['node/%node/stats'] = array(
    'title'            => 'Statistics',
    'page callback'    => 'formation_statistics_page',
    'page arguments'   => array(1),       // node_load(%node)
    'access callback'  => 'formation_access',
    'access arguments' => array(1),
    'type'             => MENU_LOCAL_TASK,          // type "onglet"
    'weight'           => '150',
  	'context'          => MENU_CONTEXT_INLINE | MENU_CONTEXT_PAGE,
    'file'             => 'formation.page.inc',
  );

  return $items;
}

/**
 * Fonction de controle d'accès pour l'onglet "statistiques".
 */
function formation_access($node) {
  return node_access('view', $node) && node_access('update', $node);
}

/**
 * Implements hook_node_view().
 *
 * Appelé à chaque fois qu'un noeud est affiché.
 */
function formation_node_view($node, $view_mode, $langcode) {
  //dpm($node);
  // On teste que le mode d'affichage est bien "full node"
  // pour ne pas incrémenter le compteur quand le noeud
  // est affiché dans une liste ou autrement que sur sa page.
  if ($view_mode == 'full') {
    db_merge('formation_count')
      ->key(array('nid' => $node->nid))
      // L'entrée en base existe.
      ->expression('compteur', 'compteur + 1')
      // L'entrée en base n'existe pas.
      ->fields(array('nid' => $node->nid, 'compteur' => '1'))
      ->execute();
  }
}

/**
 * Implements hook_node_delete().
 *
 * Appelé à chaque fois qu'un noeud est supprimé.
 */
function formation_node_delete($node) {
  // On supprime l'enregistrement dans la table formation_count
  // à chaque fois qu'un noeud est effacé.
  db_delete('formation_count')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Helper function.
 * Récupère le compteur du noeud identifié par $nid.
 */
function formation_get_compteur($nid) {
  return db_select('formation_count', 'fc')
           ->fields('fc', array('compteur'))
           ->condition('fc.nid', $nid, '=')
           ->execute()
           ->fetchField();
}

/**
 * Implements hook_user_login().
 */
function formation_user_login(&$edit, $account) {
	//dpm($account);
  $username = $account->name;
  // Type de jetons pour la fonction t() :
  // ! - interprète.
  // % - échappe et ajoute la balise <em>.
  // @ - échappe.
  drupal_set_message(t('Welcome dear !username$!', array('!username' => $username)));
}

/**
 * Implements hook_block_info().
 */
function formation_block_info() {
  // Bloc “Bienvenue“.
  $blocks['welcome'] = array(
    'info'   => t('Welcome message'),
    'status' => 1,
    'region' => 'sidebar_second',
  );
  // Bloc “Compteur de noeuds“.
  $blocks['node_count'] = array(
    'info' => t('Node count'),
  );
  // Bloc “Statistiques de noeud“.
  $blocks['node_stats'] = array(
    'info' => t('Node stats'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function formation_block_view($delta = '') {
  $block = array();

	switch ($delta) {
    // Bloc “Bienvenue“.
  	case 'welcome':
  	  $block = array(
  	    'subject' => t('Welcome'),
  	    'content' => t('Welcome to our site it is !time.',
  	                   array('!time' => date('H:i'))),
  	  );
  	break;
  	// Bloc “Compteur de noeuds“.
  	case 'node_count':
  	  $block = array(
  	    'subject' => t('Node count'),
  	    'content' => user_access('access formation') ? formation_node_count_content() : '',
  	  );
  	break;
  	// Bloc “Statistiques de noeud“.
  	case 'node_stats':
  	  $block = array(
  	    'subject' => t('Statistics'),
  	    'content' => formation_node_stats_content(),
  	  );
  	break;
  }

  return $block;
}

/**
 * Contenu du bloc de compteur de noeuds.
 */
function formation_node_count_content() {
  // REQUETE STATIQUE.
  /*$result = db_query("SELECT type, COUNT (1) AS total
  										FROM {node}
  										GROUP BY type");*/
  // REQUÊTE DYNAMIQUE.
  $query = db_select('node', 'n')
  					->fields('n', array('type'))
  					->groupBy('type');
  $query->addExpression('COUNT(1)', 'total');
  $result = $query->execute();

  foreach ($result as $record) {
    $rows[] = array(
      'type' => t(node_type_get_name($record->type)),
      'total' => $record->total,
    );
  }

  // On prépare ici les variables passées à la fonction de thème theme_table().
  $variables = array(
    'header' => array(t('Type'), t('Total')),
    'rows'   => $rows,
  );

  // On n'appelle pas directement la fonction theme_table(),
  // mais on invoque la fonction theme(). Ceci permet à Drupal
  // de choisir la surcharge éventuelle de la fonction theme_table().
  // Tous les thèmes et modules peuvent surcharger une ou plusieurs
  // fonction de thème.
  return theme('table', $variables);
}

/**
 * Contenu du bloc de statistiques d'un noeud.
 */
function formation_node_stats_content() {
  $output ='';
  // Si on n'est pas sur la page d'un noeud, il faut masquer le bloc.
  // Automatiquement lorsque le contenu d'un bloc est vide, ce dernier
  // n'est pas affiché.
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    // On charge le noeud courant.
    $node = node_load(arg(1));
    // On récupère le compteur du noeud courant.
    $compteur = formation_get_compteur(arg(1));
    $output = t("The node %title has been viewed %compteur time(s).",
             array('%title' => $node->title, '%compteur' => $compteur,));
    // $variables['compteur'] = $compteur;
    // $variables['node'] = $node;
    // $output = theme('formation_compteur', $variables);
  }

  return $output;
}

/**
 * Implements hook_form_alter().
 *
 * Permet de modifier TOUS les formulaires du site avant qu'ils ne soient
 * affichés ou traités.
 */
function formation_form_alter(&$form, &$form_state, $form_id) {
  //dpm($form_id);
  // Comme TOUS les formulaires du site vont transiter par ce hook
  // avant d'être affichés, il faut vérifier qu'on est sur le
  // formulaire qui nous intéresse avant de faire quoi que ce soit.
  // Ici, on vérifie qu'on est bien sur le formulaire de contact.
  if ($form_id == 'contact_site_form') {
    // Ajoute un champ "Téléphone".
    $form['telephone'] = array(
      '#title' => t('Phone'),
      '#type' => 'textfield',
      '#size' => 20,
    );

    // Ré-ordonne les champs.
    $form['name']['#weight']      = "-3";
    $form['mail']['#weight']      = "-2";
    $form['telephone']['#weight'] = "-1";

    // Change le texte du bouton submit.
    $form['actions']['submit']['#value'] = t('Send message now');

    // Supprime le champ "Sujet" en le rendant inaccessible.
    // On pourrait être tenté d'écrire unset($form['subject']) pour
    // supprimer carrément le champ du $form, mais cette absence risque
    // de déclencher une erreur au moment où on soumettra le formulaire.
    $form['subject']['#access'] = FALSE;

    // Ajoute une fonction de traitement maison au formulaire.
    // Notons qu'on ne peut pas utiliser la fonction de traitement par défaut,
    // contact_site_form_submit(), car elle est déjà utilisée par le module contact.
    // Le code ci-dessous AJOUTE notre fonction à la fonction par défaut.
    // Au final, les 2 fonctions seront appelées, dans l'ordre où elles
    // sont déclarées.
    //$form['#submit'][] = 'traite_formulaire_contact';

    // Une autre option serait de ne pas utiliser la fonction de traitement
    // par défaut, et de la remplacer par notre fonction, qui serait donc
    // la seule à être appelée.
    // Dans ce cas, la syntaxe changerait légèrement :
    //$form['#submit'] = array('formation_contact_form_submit');

    // On pourrait utiliser la même syntaxe pour ajouter/remplacer des
    // fonctions de validation au formulaire.
    // Pour cela, il faudrait modifier $form['#validate'].
    //$form['#validate'][] = 'formation_valide_formulaire_contact';
  }
}

/**
 * On modifie le mail envoyé par le formulaire de contact en incluant le champ
 * téléphone que l'on a ajouté au formulaire.
 */
function formation_mail_alter(&$message) {
  //dpm($message);
  if ($message['id'] == 'contact_page_mail') {
    $message['body'][] = $message['params']['telephone'];
  }
}

/**
 * Fonction de traitement maison que nous avons associée au formulaire
 * de contact dans formation_form_alter().
 *
 * Cette fonction pourrait servir à envoyer un e-mail qui contiendrait
 * le champ Téléphone que nous avons ajouté au formulaire.
 *
 * Notons que cette fonction reçoit les mêmes arguments que n'importe
 * quelle fonction de traitement : $form et &$form_state.
 */
function formation_contact_form_submit($form, &$form_state) {
	// Ici, fais quelque chose.
	drupal_set_message('Submit contact');
}

/**
 * Implements hook_help().
 */
function formation_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#formation":
      $output = t('This module does blablabla...');
    break;
  }

  return $output;
}

/**
 * Implements hook_permission().
 */
function formation_permission() {
   return array(
     // Permission d'accéder à la calculatrice.
    'access formation' => array(
      'title' => t('Access formation'),
      'description' => t('Access formation module admin pages'),
    ),
    // Permission d'accéder aux pages d'admin du module.
    'administer formation' => array(
      'title' => t('Administer formation'),
      'description' => t('Administer formation module'),
    ),
  );
}
